import streamlit as st
from datetime import datetime, timedelta
import pywencai
import time
from chinese_calendar import is_workday, is_holiday
import plotly.graph_objects as go

# Constants
MAX_STOCKS = 100
MAX_RETRIES = 1
RETRY_DELAY = 1

def safe_format(x, divisor=1, suffix=''):
    try:
        return f"{float(x)/divisor:.2f}{suffix}"
    except (ValueError, TypeError):
        return str(x)

def get_strategy_stocks(query, selected_date, max_retries=MAX_RETRIES):
    for attempt in range(max_retries):
        try:
            df = pywencai.get(query=query, sort_key='Á´û‰ª∑Êàê‰∫§ÈáëÈ¢ù', sort_order='desc')
            if df is None or df.empty:
                if attempt < max_retries - 1:
                    time.sleep(RETRY_DELAY)
                    continue
                return None, "Á≠ñÁï•Êó†Êï∞ÊçÆ"

            date_str = selected_date.strftime("%Y%m%d")
            columns_to_rename = {
                'ËÇ°Á•®‰ª£Á†Å': 'ËÇ°Á•®‰ª£Á†Å',
                'ËÇ°Á•®ÁÆÄÁß∞': 'ËÇ°Á•®ÁÆÄÁß∞',
                f'Á´û‰ª∑ÈáëÈ¢ù[{date_str}]': 'Á´û‰ª∑ÈáëÈ¢ù',
                f'Á´û‰ª∑ÈáëÈ¢ùÊéíÂêç[{date_str}]': 'Á´û‰ª∑ÈáëÈ¢ùÊéíÂêç',
                f'Á´û‰ª∑ÂºÇÂä®Á±ªÂûã[{date_str}]': 'Á´û‰ª∑ÂºÇÂä®Á±ªÂûã',
                f'ÈõÜÂêàÁ´û‰ª∑ËØÑÁ∫ß[{date_str}]': 'ÈõÜÂêàÁ´û‰ª∑ËØÑÁ∫ß',
                'ÊúÄÊñ∞Ê∂®Ë∑åÂπÖ': 'Ê∂®Ë∑åÂπÖ',
                'ÊúÄÊñ∞‰ª∑': 'ÊúÄÊñ∞‰ª∑',
                f'ÂàÜÊó∂Âå∫Èó¥Êî∂Áõò‰ª∑:ÂâçÂ§çÊùÉ[{date_str} 09:25:00]': 'Á´û‰ª∑‰ª∑Ê†º',
                f'Á´û‰ª∑Êú™ÂåπÈÖçÈáëÈ¢ù[{date_str}]': 'Á´û‰ª∑Êú™ÂåπÈÖçÈáëÈ¢ù'
                # f'ÊÄªÂ∏ÇÂÄº[{date_str}]': 'ÊÄªÂ∏ÇÂÄº'
            }
            df = df.rename(columns=columns_to_rename)
            return df[:MAX_STOCKS], None
        except Exception as e:
            if attempt < max_retries - 1:
                time.sleep(RETRY_DELAY)
            else:
                return None, f"Error in strategy stock selection after {max_retries} attempts: {str(e)}"

def run_strategy(query, selected_date, market_cap):
    st.write(f"ÈÄâËÇ°Êó•Êúü: {selected_date.strftime('%Y-%m-%d')}")
    st.write(f"Â∏ÇÂÄºÁ≠õÈÄâ: {market_cap}‰∫ø")

    if not is_workday(selected_date) or is_holiday(selected_date):
        st.warning("ÊâÄÈÄâÊó•Êúü‰∏çÊòØAËÇ°‰∫§ÊòìÊó•ÔºåËØ∑ÈÄâÊã©ÂÖ∂‰ªñÊó•Êúü„ÄÇ")
        return

    with st.spinner("Ê≠£Âú®Ëé∑ÂèñËÇ°Á•®‰ø°ÊÅØ..."):
        df, error = get_strategy_stocks(query, selected_date)

    if error:
        st.error(error)
        st.write("\nËØ∑Ê£ÄÊü•‰ª•‰∏ãÂÜÖÂÆπ:")
        st.write("1. ÊÇ®ÁöÑÁΩëÁªúËøûÊé•ÊòØÂê¶Á®≥ÂÆö„ÄÇ")
        st.write("2. pywencai Â∫ìÊòØÂê¶‰∏∫ÊúÄÊñ∞ÁâàÊú¨„ÄÇ")
        st.write("3. ÊÇ®ÁöÑÊü•ËØ¢ÊòØÂê¶ÊúâÊïà‰∏î‰∏çÂ§™Â§çÊùÇ„ÄÇ")
        st.write("4. ÊÇ®ÊòØÂê¶Êã•Êúâ‰ΩøÁî® pywencai ÁöÑÂøÖË¶ÅÊùÉÈôê/ËÆ§ËØÅ„ÄÇ")
        return

    if df is None or df.empty:
        st.warning("Ê≤°ÊúâÊâæÂà∞Á¨¶ÂêàÁ≠ñÁï•ÁöÑËÇ°Á•®„ÄÇ")
        return

    # Format and display the data
    df['Ê∂®Ë∑åÂπÖ'] = df['Ê∂®Ë∑åÂπÖ'].apply(lambda x: safe_format(x, suffix='%'))
    df['Á´û‰ª∑ÈáëÈ¢ù'] = df['Á´û‰ª∑ÈáëÈ¢ù'].apply(lambda x: safe_format(x, divisor=10000, suffix='‰∏á'))
    # df['ÊÄªÂ∏ÇÂÄº'] = df['ÊÄªÂ∏ÇÂÄº'].apply(lambda x: safe_format(x, divisor=100000000, suffix='‰∫ø'))
    df['Á´û‰ª∑Êú™ÂåπÈÖçÈáëÈ¢ù'] = df['Á´û‰ª∑Êú™ÂåπÈÖçÈáëÈ¢ù'].apply(lambda x: safe_format(x, divisor=10000, suffix='‰∏á'))


    column_order = ['ËÇ°Á•®‰ª£Á†Å', 'ËÇ°Á•®ÁÆÄÁß∞',  'ÊúÄÊñ∞‰ª∑', 'Á´û‰ª∑‰ª∑Ê†º', 'Ê∂®Ë∑åÂπÖ', 'Á´û‰ª∑ÈáëÈ¢ù',
                    'Á´û‰ª∑ÈáëÈ¢ùÊéíÂêç', 'Á´û‰ª∑Êú™ÂåπÈÖçÈáëÈ¢ù', 'Á´û‰ª∑ÂºÇÂä®Á±ªÂûã', 'ÈõÜÂêàÁ´û‰ª∑ËØÑÁ∫ß']
    df = df.reindex(columns=column_order)

    st.dataframe(df)

    # Create a bar chart for Á´û‰ª∑ÈáëÈ¢ù
    fig = go.Figure(data=[go.Bar(x=df['ËÇ°Á•®ÁÆÄÁß∞'], y=df['Á´û‰ª∑ÈáëÈ¢ù'].str.replace('‰∏á', '').astype(float))])
    fig.update_layout(title='ËÇ°Á•®Á´û‰ª∑ÈáëÈ¢ùÂØπÊØî', xaxis_title='ËÇ°Á•®', yaxis_title='Á´û‰ª∑ÈáëÈ¢ù (‰∏áÂÖÉ)')
    st.plotly_chart(fig)

def strategy_1(formatted_date, market_cap):
    st.session_state.current_strategy = 'strategy_1'
    query = f"""
    ÈùûSTÔºå{formatted_date}Á´û‰ª∑Ê∂®ÂÅúÔºå{formatted_date}Á´û‰ª∑Êàê‰∫§ÈáëÈ¢ùÊéíÂ∫èÔºåÊµÅÈÄöÂ∏ÇÂÄºÂ∞è‰∫é{market_cap}‰∫ø
    """
    run_strategy(query, formatted_date, market_cap)

def strategy_2(formatted_date, market_cap):
    st.session_state.current_strategy = 'strategy_2'
    query = f"""
    ÈùûSTÔºå{formatted_date}Á´û‰ª∑Ë∑åÂÅúÔºå{formatted_date}Á´û‰ª∑Êàê‰∫§ÈáëÈ¢ùÊéíÂ∫èÔºåÊµÅÈÄöÂ∏ÇÂÄºÂ∞è‰∫é{market_cap}‰∫ø
    """
    run_strategy(query, formatted_date, market_cap)

def app():
    #st.set_page_config(layout="wide", page_title="Á´û‰ª∑ÂàÜÊûê", page_icon="üìà")
    st.title("Á´û‰ª∑ÂàÜÊûê")


    col1, col2 = st.columns(2)
    with col1:
        selected_date = st.date_input("ÈÄâÊã©Êó•Êúü", datetime.now())
    with col2:
        market_cap_options = [100, 200, 500, 1000]
        selected_market_cap = st.selectbox("ÈÄâÊã©Â∏ÇÂÄº‰∏äÈôêÔºà‰∫øÔºâ", market_cap_options, index=3)

    tab1, tab2 = st.tabs(["Á´û‰ª∑Ê∂®ÂÅú", "Á´û‰ª∑Ë∑åÂÅú"])

    with tab1:
        strategy_1(selected_date, selected_market_cap)
    with tab2:
        strategy_2(selected_date, selected_market_cap)

if __name__ == "__main__":
    app()